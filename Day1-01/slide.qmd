---
title: Data Analysis using Python
subtitle: A Quick Refresher
author: EPFL Extension School
institute: World Economic Forum
date: 2023-09-28
editor:
  render-on-save: true
format:
  revealjs:
    code-copy: true
    code-link: true
    embed-resources: false
    smaller: true
    scrollable: true
    theme: ../assets/theme.scss
    logo: ../assets/img/logo_red.png
    code-fold: true
    code-line-numbers: false
    slide-number: true
    chalkboard:
      buttons: true
    preview-links: auto
    menu: false
title-slide-attributes:
  data-background-image: img/AdobeStock_589883406.jpeg
  data-background-size: cover
  data-background-opacity: "0.5"
from: markdown+emoji
execute:
  enabled: true
  cache: true
jupyter: python3

---

## What's the Plan?

<br>
<!---
 https://mermaid.js.org/syntax/flowchart.html 
--->

```{mermaid}
flowchart BT
  A([Python]) -----> E([PyMC])
  B([Statistics]) ---> D([A/B testing]) 
  B([Statistics]) ---> C([Bayes Rule]) 
  C([Bayes Rule]) --> D([A/B testing])  
  C([Bayes Rule]) ---> F[(Bayesian A/B Testing in PyMC)]
  E([PyMC]) --> F[(Bayesian A/B Testing in PyMC)]
  D([AB testing])  ---> F[(Bayesian A/B Testing in PyMC)]
```

::: {.fragment fragment-index=0 .absolute top="46%" bottom="16%"  left="34%" width="330" }
::: {.blackbox}
:::
:::

::: {.fragment fragment-index=0 .absolute top="370" left="50" width="200"}
[Day 1]{style="color:#ff412c; font-weight: normal; font-size: 2.0em;"}
:::

::: {.fragment fragment-index=1 .absolute top="15%" bottom="46%"  left="32%" width="375"}
::: {.blackbox}
:::
:::

::: {.fragment fragment-index=1 .absolute top="150" left="50" width="200"}
[Day 2]{style="color:#ff412c; font-weight: normal; font-size: 2.0em;"}
:::

## What's the Plan?
#### This session

<!---
 https://mermaid.js.org/syntax/flowchart.html 
--->

```{mermaid}
flowchart BT
  A([Python]) -----> E([PyMC])
  B([Statistics]) ---> D([A/B testing]) 
  B([Statistics]) ---> C([Bayes Rule]) 
  C([Bayes Rule]) --> D([A/B testing])  
  C([Bayes Rule]) ---> F[(Bayesian A/B Testing in PyMC)]
  E([PyMC]) --> F[(Bayesian A/B Testing in PyMC)]
  D([AB testing])  ---> F[(Bayesian A/B Testing in PyMC)]
```


::: {.absolute top="75%" bottom="15%"  left="35%" right="80%" width="120" }
::: {.blackbox}
:::
:::



## {chalkboard-buttons="false" background-image="../assets/img/AdobeStock_536776996.jpeg"  background-size="cover"}

 
[Goal of This Session:]{style="font-size: 1.5em; font-weight: bold;"}

<br>

[A quick refresher on Python]{style="color:#ff412c; font-weight: bold;"}


## Data analysis with Python
#### A quick refresher

<br>

Durig the next hour, you will be working with the `Swiss communes` data {{< fa database >}} published by the Federal Statistical Office of Switzerland. 

The data is available in the `data` folder of the workshop repository.

::: notes
:::


## Data analysis with Python

#### Swiss Communes Data 

::: small-font-df
```{python}
#| echo: false
#| eval: true 
#| code-fold: false

import pandas as pd

df = pd.read_csv('data/communes.csv')
df.sample(3).T
```
:::

::: fragment
::: {.absolute top="18%" bottom="7%"  left="22%" width="245" }
::: {.blackbox}
:::
:::
:::


::: fragment
::: {.absolute top="41%" bottom="48%" left="20%" width="610" }
::: {.blackbox}
:::
:::
:::

::: fragment
::: {.absolute top="62%" bottom="22%" left="20%" width="610"}
::: {.blackbox}
:::
:::
::: 

## {chalkboard-buttons="false" background-image="../assets/img/Handson_AdobeStock_316152114.jpeg" background-position="center"  background-repeat="no-repeat" background-opacity="0.5" background-size="cover"}

![](../assets/img/python-logo-inkscape.svg){width="30%" height="30%" fig-align="center"}

Let's begin:

-   Open the Jupyter notebook in `Day1-01/hands-on.ipynb`
-   Follow the instructions in the notebook, and provide your answers in the code cells
-   You will be able to find the solution notebook by the end of the day in `Day1-01/hands-on-solution.ipynb`
-   [Please be back here at 10:00]{style="color:#ff412c; font-weight: bold;"}

::: footer
:::

## Solutions

<!-- ::: info-box
You will be able to find the solution notebook by the end of the day in `Day1-01/hands-on-solution.ipynb`
::: -->

<br>

#### A. Importing and cleaning

::: small-font-df
```{python}
#| echo: true
#| eval: true 
#| code-fold: false
import pandas as pd

df = pd.read_csv("data/communes.csv")

df.shape
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df.head(2)
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df.index
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
list(df.columns)
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df.dtypes
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df[df.isna().any(axis=1)]
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df.dropna(inplace = True)
```

<br/>

#### B. Exploration: numerical summaries, indexing and grouping


```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df.describe()
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df[["Commune", "Canton", "Residents"]].sort_values(by=['Residents'], ascending=False).head(10)
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df[df['20-64 years'] > 50].groupby('Canton')['20-64 years'].count().sort_values()
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
df.groupby('Canton')['Elevation'].agg(lambda x : max(x) - min(x)).sort_values(ascending=False).head(5)
```

<br/>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
pd.crosstab(df['Commune'], df['Canton'])
```

<br/>

#### C. Exploration: visualizations

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
#| code-line-numbers: 1|5
import matplotlib.pyplot as plt

top10 = df.sort_values(by=['Residents'], ascending=False).head(10)

top10.plot.barh(x='Commune', y='Residents', title="10 populated communes")
plt.xlabel('population')
plt.show()
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
top10[['Settlement area', 'Agricultural area',
       'Wooded area','Unproductive area','Commune']].plot.barh(x='Commune',stacked=True)

plt.xlabel('area type in %')
plt.title("10 populated communes by type of area")
plt.legend(bbox_to_anchor=(1,1))
plt.show()
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
#| code-line-numbers: 1|3
import seaborn as sns

sns.violinplot(x="Language", y="0-19 years",data=df,color='0.8')

plt.title('distributions of the age group 0-19 years across language regions')
plt.ylabel('0-19 years (in %)')
plt.show()
```

<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
#| code-line-numbers: 1,2,4|6-8
fig, axes = plt.subplots(nrows = 1,
                         ncols = 3,
                         figsize = (12, 3), 
                         sharey=True)   

sns.boxplot(x="Language", y="0-19 years",   data=df, ax=axes[0])
sns.boxplot(x="Language", y="20-64 years",     data=df, ax=axes[1])
sns.boxplot(x="Language", y="65 years or over",data=df, ax=axes[2])

axes[0].set_title('age group 0-19 vs language regions')
axes[1].set_title('age group 20-64 vs language regions')
axes[2].set_title('age group 65 years or over vs language regions')

fig.tight_layout()
plt.show()
```


<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
#| code-line-numbers: 1|3,4|5
sns.pairplot(
            data=df, 
            y_vars='Agricultural area', 
            x_vars=['Settlement area','Wooded area','Unproductive area'], 
            hue='Elevation',
            height=3,
            plot_kws={"s": 15})


plt.show()
```


<br>

```{python}
#| echo: true
#| eval: true 
#| code-fold: false
#| code-line-numbers: 5,9|
fig, axes = plt.subplots(nrows = 1,
                         ncols = 2,
                         figsize = (12, 4), sharey=True)

sns.scatterplot(data=df, x="East coordinate", y="North coordinate", hue='Elevation', ax=axes[0], s=15)
axes[0].legend(loc='upper left')
axes[0].set_title('Commune map of Switzerland')

sns.scatterplot(data=df, x="East coordinate", y="North coordinate", hue='Language', ax=axes[1], s=15)
axes[1].legend(loc='upper left')
axes[1].set_title('Commune map of Switzerland')

fig.tight_layout()
plt.show()
```

:::



## {chalkboard-buttons="false" background-image="../assets/img/Coffee_AdobeStock_318442666.jpeg"  background-size="cover" background-opacity="0.8" }

::: footer

:::